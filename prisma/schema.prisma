// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement())
  email                  String          @unique
  username               String          @unique
  avatar                 String
  cover                  String
  name                   String
  surname                String
  description            String
  city                   String
  school                 String
  work                   String
  createdAt              DateTime        @default(now())
  posts                  Post[]
  likes                  Like[]
  Comment                Comment[]
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks                 Block[]         @relation("BlockSent")
  blockedBy              Block[]         @relation("BlockReceived")
  stories                Story[]
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  likes     Like[]
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User?    @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int?
  following   User?    @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int?
}

model FollowRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  sender     User? @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int?
  receiver   User? @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int?

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  blocked   User @relation("BlockSent", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId Int
  blocker   User @relation("BlockReceived", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId Int

  @@unique([blockedId, blockerId])
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}
